---
import type { HTMLAttributes } from 'astro/types';
import Element from './Element.astro';
import Card from './Card.astro';

interface Props extends HTMLAttributes<'div'> {
  position?: 'left' | 'right' | undefined;
}

const {
  position = 'left',
  class: classList = '',
  ...rest
} = Astro.props as Props;
---

<Element as="z-dropdown" class:list="relative" {classList} {...rest}>
  <slot name="trigger" />
  <Card
    class:list={[
      'hidden absolute z-20 mt-2 w-max',
      'bg-flexoki-base-100 dark:bg-flexoki-base-900 border border-flexoki-base-100 dark:border-flexoki-base-900',
      {
        'right-0': position === 'right',
        'left-0': position === 'left',
      },
    ]}
  >
    <slot />
  </Card>
</Element>

<script>
  class Dropdown extends HTMLElement {
    constructor() {
      super();

      const dropdownButtonTrigger = this.children[0];
      if (!dropdownButtonTrigger) {
        return;
      }

      const dropdownContent = this.children[1];
      if (!dropdownContent) {
        return;
      }

      dropdownButtonTrigger.addEventListener('click', () => {
        dropdownContent?.classList.toggle('hidden');
      });

      document.addEventListener('click', (event) => {
        if (
          !dropdownButtonTrigger.contains(event.target as Node) &&
          !dropdownContent?.contains(event.target as Node)
        ) {
          dropdownContent?.classList.add('hidden');
        }
      });
    }
  }

  customElements.define('z-dropdown', Dropdown);
</script>
