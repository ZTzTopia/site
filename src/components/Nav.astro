---
import Dropdown from "./Dropdown.astro";

interface Item {
  url: string;
  title: string;
}

interface Props {
  items: Item[];
}

const { items }: Props = Astro.props;
---
<header
  class="sticky top-0 z-10 bg-flexoki-base-paper/25 dark:bg-flexoki-base-black/25 backdrop-blur-md"
>
  <div class="mx-auto max-w-screen-sm px-4 text-sm font-medium">
    <div class="flex flex-wrap items-center justify-between gap-4 py-4">
      <a href="/" class="font-bold text-flexoki-cyan-600 dark:text-flexoki-cyan-400">ztz0</a>

      <div class="flex gap-x-2 md:gap-x-4">
        <Dropdown dropdownId="menu" position="right" class="block md:hidden">
          <div class="flex flex-col p-1">
            {items.map((item: Item) => {
              return (
                <a
                  href={item.url}
                  class="block px-4 py-2 rounded-md hover:bg-flexoki-base-150 dark:hover:bg-flexoki-base-850"
                >
                  {item.title}
                </a>
              );
            })}
          </div>
        </Dropdown>

        <div class="hidden md:flex items-center gap-4">
          {items.map((item: Item) => {
            return (
              <a href={item.url} class="hover:text-flexoki-cyan-600 dark:hover:text-flexoki-cyan-400">
                {item.title}
              </a>
            );
          })}
        </div>

        <Dropdown dropdownId="switchTheme" icon="lucide:moon" position="right">
          <div class="flex flex-col p-1">
            <button
              id="lightTheme"
              class="block px-4 py-2 text-left rounded-md hover:bg-flexoki-base-300 dark:hover:bg-flexoki-base-850"
            >
              Light Mode
            </button>
            <button
              id="darkTheme"
              class="block px-4 py-2 text-left rounded-md hover:bg-flexoki-base-300 dark:hover:bg-flexoki-base-850"
            >
              Dark Mode
            </button>
            <button
              id="systemTheme"
              class="block px-4 py-2 text-left rounded-md hover:bg-flexoki-base-300 dark:hover:bg-flexoki-base-850"
            >
              System Default
            </button>
          </div>
        </Dropdown>
      </div>
    </div>
  </div>
</header>

<script>
  const applyTheme = (theme) => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else if (theme === "light") {
      document.documentElement.classList.remove("dark");
    }
  };

  const applySystemTheme = () => {
    const systemPrefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    if (systemPrefersDark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  };

  const initializeTheme = () => {
    const savedTheme = localStorage.getItem("theme");
    if (!savedTheme || savedTheme === "system") {
      applySystemTheme();
    } else {
      applyTheme(savedTheme);
    }
  };

  const initializeListenet = () => {
    const lightThemes = document.querySelectorAll("#lightTheme");
    const darkThemes = document.querySelectorAll("#darkTheme");
    const systemThemes = document.querySelectorAll("#systemTheme");

    lightThemes.forEach((lightTheme) => {
      lightTheme.addEventListener("click", () => {
        localStorage.setItem("theme", "light");
        applyTheme("light");
      });
    });

    darkThemes.forEach((darkTheme) => {
      darkTheme.addEventListener("click", () => {
        localStorage.setItem("theme", "dark");
        applyTheme("dark");
      });
    });

    systemThemes.forEach((systemTheme) => {
      systemTheme.addEventListener("click", () => {
        localStorage.setItem("theme", "system");
        applySystemTheme();
      });
    });
  };
  
  document.addEventListener("DOMContentLoaded", () => {
    initializeTheme();
    initializeListenet();
  });

  document.addEventListener("astro:after-swap", () => {
    initializeTheme();
    initializeListenet();
  });
</script>
