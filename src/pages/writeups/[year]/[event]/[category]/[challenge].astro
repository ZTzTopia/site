---
import type { MarkdownHeading } from 'astro';
import { getCollection, render, type CollectionEntry } from 'astro:content';
import ChallengeMeta from '../../../../../components/ChallengeMeta.astro';
import WriteupLayout from '../../../../../layouts/WriteupLayout.astro';
import ChallengeFlag from '../../../../../components/ChallengeFlag.astro';

export async function getStaticPaths() {
  const eventChallengeCollections = await getCollection('eventChallenges');
  const paths = eventChallengeCollections.map((eventChallenge) => {
    const slugs = eventChallenge.id.split('/');
    return {
      params: {
        year: slugs[0],
        event: slugs[1],
        category: slugs[2],
        challenge: slugs[3],
      },
      props: {
        eventChallenge: eventChallenge,
      },
    };
  });

  return paths;
}

interface Props {
  eventChallenge: CollectionEntry<'eventChallenges'>;
}

const props: Props = Astro.props;

const renderedEventChallenge = await render(props.eventChallenge);
const headings: MarkdownHeading[] = renderedEventChallenge.headings;
---

<WriteupLayout title=`Writeup for ${props.eventChallenge.data.title}` {headings}>
  <h1 class="text-4xl font-bold" id="_halll">{props.eventChallenge.data.title}</h1>
  <ChallengeMeta event={props.eventChallenge} />
  <renderedEventChallenge.Content />
  <ChallengeFlag event={props.eventChallenge} >
</WriteupLayout>

<script is:inline>
  for (let level = 0; level <= 6; level++) {
    document.querySelectorAll(`main h${level}`).forEach((heading) => {
      const newLevel = Math.max(1, level - 2); // Ensure minimum level is h1
      const newHeading = document.createElement(`h${newLevel}`);
      newHeading.innerHTML = heading.innerHTML;
      Array.from(heading.attributes).forEach((attr) =>
        newHeading.setAttribute(attr.name, attr.value)
      );
      heading.replaceWith(newHeading);
    });
  }
</script>
