---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import ChallengeCard from '../../../../components/ChallengeCard.astro';
import MainLayout from '../../../../layouts/MainLayout.astro';

export async function getStaticPaths() {
  const eventCollections = await getCollection('events');
  const paths = eventCollections.map((event) => {
    const slugs = event.id.split('/');
    return {
      params: {
        year: slugs[0],
        event: slugs[1],
      },
      props: {
        event,
      },
    };
  });

  return paths;
}

interface Params {
  year: string;
  event: string;
}

interface Props {
  event: CollectionEntry<'events'>;
}

const params = Astro.params as Params;
const props: Props = Astro.props;

const renderedEvent = await render(props.event);

const eventChallengeCollections = await getCollection(
  'eventChallenges',
  ({ id }) =>
    id.split('/')[0] === params.year && id.split('/')[1] === params.event
);
---

<MainLayout title={`Writeup for ${props.event.data.title}`}>
  <div class="flex flex-col gap-4">
    <h1 class="text-4xl font-bold">{props.event.data.title}</h1>
    <div class="flex flex-col gap-4">
      <renderedEvent.Content />
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-2">
        {
          eventChallengeCollections.length === 0 ? (
            <p>No challenges found :(</p>
          ) : (
            eventChallengeCollections.map((eventChallenge) => (
              <ChallengeCard event={eventChallenge} href={`/writeups/${eventChallenge.id.split('/').slice(0, -1).join('/')}`} />
            ))
          )
        }
      </div>
    </div>
  </div>
</MainLayout>
